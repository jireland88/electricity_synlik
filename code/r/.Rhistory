coord <- pheatmap:::find_coordinates(length(coln), gaps)
x     <- coord$coord - 0.5 * coord$size
res   <- grid::textGrob(
coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"),
vjust = 1.25, rot = 0, gp = grid::gpar(...)
)
return(res)
}
draw_colnames_def = function(coln, gaps, vjust_col, hjust_col, angle_col, ...){
coord = find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3, "bigpts"), vjust = 2, hjust = hjust_col, rot = angle_col, gp = gpar(...))
return(res)
}
cn <- c('$\\mu_0$', '$\\beta_1$', '$\\beta_2$', '$\\alpha_0$', '$\\sigma_0$',
'$\\mu_1$', '$\\sigma_1$', '$\\alpha_{-1}$', '$\\sigma_{-1}$', '$p$')
rn <- c('$\\bar{x}(\\mathbf{y})$', '$\\bar{x}_5(\\mathbf{y}) - \\bar{x}(\\mathbf{y})$',
'$\\bar{x}_6(\\mathbf{y}) - \\bar{x}(\\mathbf{y})$', 'sd($\\mathbf{y}$)',
'IQR($\\mathbf{y}$)', 'max($|\\mathbf{y}|$)',
'$\\bar{x}(\\mathbf{d}^1)', 'max($|\\mathbf{d}^1|$)',
'sd($\\mathbf{d}^1$)', '$sk($\\mathbf{d}^1$)',
'k($\\mathbf{d}^1$)', '$\\bar{x}(\\mathbf{d}^2)',
'max($|\\mathbf{d}^1|$)', 'sd($\\mathbf{d}^2$)',
'$sk($|\\mathbf{d}^2|$)', 'k($\\mathbf{d}^2$)',
'$\\xi_0(\\mathbf{y})$', '$\\xi_1(\\mathbf{y})$', '$\\xi_2(\\mathbf{y})$',
'$\\xi_3(\\mathbf{y})$', '$\\nu_0(\\mathbf{y})$', '$\\nu_1(\\mathbf{y})$',
'$\\nu_2(\\mathbf{y})$', '$\\nu_3(\\mathbf{y})$', 'sk($\\mathbf{y}$)',
'$\\bar{x}(\\mathbf{y}) - m(\\mathbf{y})$',
'$\\theta_1(\\mathbf{y})$', '$\\mathbf{\\theta}_2(\\mathbf{y})$',
'$\\hat{p}(\\mathbf{y})$', '$\\gamma_0(\\mathbf{y})$', '$\\gamma_1(\\mathbf{y})$',
'$\\gamma_2(\\mathbf{y})$', '$\\gamma_3(\\mathbf{y})$')
palette <- colorRampPalette(brewer.pal(7, name = 'Blues'))(100)
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_0",
ns = asNamespace("pheatmap")
)
h_sp <- pheatmap(cor_sp, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs parameters',
labels_col = TeX(cn), labels_row = TeX(rn),
fontsize=20, fontsize_row = 20, fontsize_col = 20,
color=palette)
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_def",
ns = asNamespace("pheatmap")
)
h_ss <- pheatmap(cor_ss, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs statistics',
fontsize=20, fontsize_row = 20, fontsize_col = 20,
color=palette, labels_row = TeX(rn), labels_col = TeX(rn))
pdf("../report/images/fitting/full_model/cor_ss.pdf", width=12, height=12)
h_ss
dev.off()
pdf("../report/images/fitting/full_model/cor_sp.pdf", width=12, height=12)
h_sp
dev.off()
rn <- c('$\\bar{x}(\\mathbf{y})$', '$\\bar{x}_5(\\mathbf{y}) - \\bar{x}(\\mathbf{y})$',
'$\\bar{x}_6(\\mathbf{y}) - \\bar{x}(\\mathbf{y})$', 'sd($\\mathbf{y}$)',
'IQR($\\mathbf{y}$)', 'max($|\\mathbf{y}|$)',
'$\\bar{x}(\\mathbf{d}^1$)', 'max($|\\mathbf{d}^1|$)',
'sd($\\mathbf{d}^1$)', '$sk($\\mathbf{d}^1$)',
'k($\\mathbf{d}^1$)', '$\\bar{x}(\\mathbf{d}^2)$',
'max($|\\mathbf{d}^1|$)', 'sd($\\mathbf{d}^2$)',
'$sk($|\\mathbf{d}^2|$)', 'k($\\mathbf{d}^2$)',
'$\\xi_0(\\mathbf{y})$', '$\\xi_1(\\mathbf{y})$', '$\\xi_2(\\mathbf{y})$',
'$\\xi_3(\\mathbf{y})$', '$\\nu_0(\\mathbf{y})$', '$\\nu_1(\\mathbf{y})$',
'$\\nu_2(\\mathbf{y})$', '$\\nu_3(\\mathbf{y})$', 'sk($\\mathbf{y}$)',
'$\\bar{x}(\\mathbf{y}) - m(\\mathbf{y})$',
'$\\theta_1(\\mathbf{y})$', '$\\mathbf{\\theta}_2(\\mathbf{y})$',
'$\\hat{p}(\\mathbf{y})$', '$\\gamma_0(\\mathbf{y})$', '$\\gamma_1(\\mathbf{y})$',
'$\\gamma_2(\\mathbf{y})$', '$\\gamma_3(\\mathbf{y})$')
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_0",
ns = asNamespace("pheatmap")
)
h_sp <- pheatmap(cor_sp, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs parameters',
labels_col = TeX(cn), labels_row = TeX(rn),
fontsize=20, fontsize_row = 20, fontsize_col = 20,
color=palette)
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_def",
ns = asNamespace("pheatmap")
)
h_ss <- pheatmap(cor_ss, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs statistics',
fontsize=20, fontsize_row = 20, fontsize_col = 20,
color=palette, labels_row = TeX(rn), labels_col = TeX(rn))
pdf("../report/images/fitting/full_model/cor_ss.pdf", width=12, height=12)
h_ss
dev.off()
pdf("../report/images/fitting/full_model/cor_sp.pdf", width=12, height=12)
h_sp
dev.off()
pheatmap:::draw_colnames
library(pheatmap)
pheatmap:::draw_colnames
library(pheatmap)
pheatmap:::draw_colnames
library(pheatmap)
pheatmap:::draw_colnames
library(mvnfast)
library(latex2exp)
library(pheatmap)
library(RColorBrewer)
library(grid)
library(cowplot)
library(moments)
library(MASS)
source('models.r')
source('helper_functions.r')
stat_param_cor <- function(init_par, covar, stats, n_sim, n_stats, model_func) {
pars <- rmvn(n_sim, init_par, covar)
stats_vecs <- matrix(NA, n_sim, n_stats)
cors <- matrix(NA, n_stats, length(init_par))
for (i in seq(n_sim)) {
stats_vecs[i, ] <- stats(model_func(pars[i, ]))
}
pars <- pars[!is.na(rowSums(stats_vecs)),]
stats_vecs <- stats_vecs[!is.na(rowSums(stats_vecs)),]
for (p in seq_along(init_par)) {
for (s in seq(n_stats)) {
cors[s, p] = abs(cor(pars[, p], stats_vecs[, s], use = "complete.obs"))
}
}
return(cors)
}
stat_cor <- function(init_par, covar, stats, n_sim, n_stats, model_func) {
pars <- rmvn(n_sim, init_par, covar)
stats_vecs <- matrix(NA, n_sim, n_stats)
for (i in seq(n_sim)) {
stats_vecs[i, ] <- stats(model_func(pars[i, ]))
}
stats_vecs <- stats_vecs[!is.na(rowSums(stats_vecs)),]
c <- abs(cor(stats_vecs, use = "complete.obs"))
return(c)
}
obs_length <- 1000
true_par <- c(2.852, -0.089, -0.192, log(0.112 / (1 - 0.112)), log(0.114),
0.103, log(0.542), log(0.313 / (1 - 0.313)), log(0.453),
log(0.95 / (1 - 0.95)))
obs <- do.call(regime_jump_model, as.list(append(true_par, 1000)))
obs_ord <- cbind(rep(1, length(obs)-1),
poly(ordered_differences(obs), 3))
model_func <- function(pars) {
obs <- do.call(regime_jump_model, as.list(append(pars, 1000)))
return(obs)
}
stats <- function(xs) {
sat <- extract_days(xs, c(5))
sun <- extract_days(xs, c(6))
mu <- mean(xs)
diffs_1 <- diff(xs)
diffs_2 <- diff(diffs_1)
X <- cbind(rep(1, obs_length - 3),
xs[1:(obs_length-3)],
xs[2:(obs_length-2)],
xs[3:(obs_length-1)])
reg <- lm.fit(X, xs[4:obs_length])$coefficients
shape <- lm.fit(obs_ord, ordered_differences(xs))$coefficients
return(c(mu, mean(sat) - mu, mean(sun) - mu, sd(xs), IQR(xs),
max(abs(xs)), mean(diffs_1), max(abs(diffs_1)), sd(diffs_1),
skewness(diffs_1), kurtosis(diffs_1), mean(diffs_2),
max(abs(diffs_2)), sd(diffs_2), skewness(diffs_2),
kurtosis(diffs_2), reg, as.vector(acf(xs, 3)$acf),
skewness(xs), mean(xs) - median(xs), gamma(exp(xs), TRUE),
spike_test(xs, 2), shape))
}
n_stats = 33
cor_sp <- stat_param_cor(true_par, diag(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1))^2,
stats, 1000, n_stats, model_func)
cor_ss <- stat_cor(true_par, diag(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1))^2,
stats, 1000, n_stats, model_func)
draw_colnames_0 <- function (coln, gaps, ...) {
coord <- pheatmap:::find_coordinates(length(coln), gaps)
x     <- coord$coord - 0.5 * coord$size
res   <- grid::textGrob(
coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"),
vjust = 1.25, rot = 0, gp = grid::gpar(...)
)
return(res)
}
cn <- c('$\\mu_0$', '$\\beta_1$', '$\\beta_2$', '$\\alpha_0$', '$\\sigma_0$',
'$\\mu_1$', '$\\sigma_1$', '$\\alpha_{-1}$', '$\\sigma_{-1}$', '$p$')
rn <- c('$\\bar{x}(\\mathbf{y})$', '$\\bar{x}_5(\\mathbf{y}) - \\bar{x}(\\mathbf{y})$',
'$\\bar{x}_6(\\mathbf{y}) - \\bar{x}(\\mathbf{y})$', 'sd($\\mathbf{y}$)',
'IQR($\\mathbf{y}$)', 'max($|\\mathbf{y}|$)',
'$\\bar{x}(\\mathbf{d}^1$)', 'max($|\\mathbf{d}^1|$)',
'sd($\\mathbf{d}^1$)', '$sk($\\mathbf{d}^1$)',
'k($\\mathbf{d}^1$)', '$\\bar{x}(\\mathbf{d}^2)$',
'max($|\\mathbf{d}^1|$)', 'sd($\\mathbf{d}^2$)',
'$sk($|\\mathbf{d}^2|$)', 'k($\\mathbf{d}^2$)',
'$\\xi_0(\\mathbf{y})$', '$\\xi_1(\\mathbf{y})$', '$\\xi_2(\\mathbf{y})$',
'$\\xi_3(\\mathbf{y})$', '$\\nu_0(\\mathbf{y})$', '$\\nu_1(\\mathbf{y})$',
'$\\nu_2(\\mathbf{y})$', '$\\nu_3(\\mathbf{y})$', 'sk($\\mathbf{y}$)',
'$\\bar{x}(\\mathbf{y}) - m(\\mathbf{y})$',
'$\\theta_1(\\mathbf{y})$', '$\\mathbf{\\theta}_2(\\mathbf{y})$',
'$\\hat{p}(\\mathbf{y})$', '$\\gamma_0(\\mathbf{y})$', '$\\gamma_1(\\mathbf{y})$',
'$\\gamma_2(\\mathbf{y})$', '$\\gamma_3(\\mathbf{y})$')
palette <- colorRampPalette(brewer.pal(7, name = 'Blues'))(100)
.draw_col <- get("draw_colnames", envir = pheatmap)
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_0",
ns = asNamespace("pheatmap")
)
h_sp <- pheatmap(cor_sp, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs parameters',
labels_col = TeX(cn), labels_row = TeX(rn),
fontsize=20, fontsize_row = 20, fontsize_col = 20,
color=palette)
assignInNamespace(
x = "draw_colnames",
value = ".draw_col",
ns = asNamespace("pheatmap")
)
h_ss <- pheatmap(cor_ss, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs statistics',
fontsize=20, fontsize_row = 20, fontsize_col = 20,
color=palette, labels_row = TeX(rn), labels_col = TeX(rn))
pdf("../report/images/fitting/full_model/cor_ss.pdf", width=12, height=12)
h_ss
dev.off()
pdf("../report/images/fitting/full_model/cor_sp.pdf", width=12, height=12)
h_sp
dev.off()
.draw_col
get("draw_colnames", envir = pheatmap)
get("draw_colnames", envir = 'pheatmap')
get("draw_colnames", 'pheatmap')
get("draw_colnames", pos = 'pheatmap')
get("draw_colnames")
get("draw_colnames")
asNamespace('pheatmap')
get("draw_colnames", asNamespace('pheatmap'))
library(mvnfast)
library(latex2exp)
library(pheatmap)
library(RColorBrewer)
library(grid)
library(cowplot)
source('models.r')
source('helper_functions.r')
stat_param_cor <- function(init_par, covar, stats, n_sim, n_stats, model_func) {
pars <- rmvn(n_sim, init_par, covar)
stats_vecs <- matrix(NA, n_sim, n_stats)
cors <- matrix(NA, n_stats, length(init_par))
for (i in seq(n_sim)) {
stats_vecs[i, ] <- stats(model_func(pars[i, ]))
}
pars <- pars[!is.na(rowSums(stats_vecs)),]
stats_vecs <- stats_vecs[!is.na(rowSums(stats_vecs)),]
for (p in seq_along(init_par)) {
for (s in seq(n_stats)) {
cors[s, p] = abs(cor(pars[, p], stats_vecs[, s], use = "complete.obs"))
}
}
return(cors)
}
stat_cor <- function(init_par, covar, stats, n_sim, n_stats, model_func) {
pars <- rmvn(n_sim, init_par, covar)
stats_vecs <- matrix(NA, n_sim, n_stats)
for (i in seq(n_sim)) {
stats_vecs[i, ] <- stats(model_func(pars[i, ]))
}
stats_vecs <- stats_vecs[!is.na(rowSums(stats_vecs)),]
c <- abs(cor(stats_vecs, use = "complete.obs"))
return(c)
}
model_func <- function(pars) {
obs <- do.call(rjm_simple, as.list(append(pars, 1000)))
return(obs)
}
stats <- function(xs) {
sat <- extract_days(xs, c(5))
sun <- extract_days(xs, c(6))
mu <- mean(xs)
sigma <- sd(xs)
reg <- autoregress(xs, 1)
return(c(mu, mean(sat), mean(sun), reg, sigma))
}
true_par <- c(2.852, -0.089, -0.192, log(0.112 / (1 - 0.112)), log(0.114))
n_stats = 6
cor_sp <- stat_param_cor(true_par, diag(c(1, 1, 1, 1, 1))^2,
stats, 10000, n_stats, model_func)
cor_ss <- stat_cor(true_par, diag(c(1, 1, 1, 1, 1))^2, stats,
1000, n_stats, model_func)
draw_colnames_0 <- function (coln, gaps, ...) {
coord <- pheatmap:::find_coordinates(length(coln), gaps)
x     <- coord$coord - 0.5 * coord$size
res   <- grid::textGrob(
coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"),
vjust = 1.25, rot = 0, gp = grid::gpar(...)
)
return(res)
}
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_0",
ns = asNamespace("pheatmap")
)
cn <- c('$\\mu_0$', '$\\beta_1$', '$\\beta_2$', '$\\alpha_0$', '$\\sigma_0$')
rn <- c('$\\bar{x}(\\mathbf{y})$', '$\\bar{x}_5(\\mathbf{y})$', '$\\bar{x}_6(\\mathbf{y})$',
'$\\xi_0(\\mathbf{y})$', '$\\xi_1(\\mathbf{y})$', 'sd($\\mathbf{y}$)')
palette <- colorRampPalette(brewer.pal(7, name = 'Blues'))(100)
h_ss <- pheatmap(cor_ss, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs statistics',
fontsize=30, fontsize_row = 40, fontsize_col = 40,
color=palette, labels_row = TeX(rn), labels_col = TeX(rn))
h_sp <- pheatmap(cor_sp, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs parameters',
labels_col = TeX(cn), labels_row = TeX(rn),
fontsize=30, fontsize_row = 40, fontsize_col = 40,
color=palette)
pdf("../report/images/fitting/simple_model/cor_ss.pdf", width=12, height=12)
h_ss
dev.off()
pdf("../report/images/fitting/simple_model/cor_sp.pdf", width=12, height=12)
h_sp
dev.off()
library(mvnfast)
library(latex2exp)
library(pheatmap)
library(RColorBrewer)
library(grid)
library(cowplot)
source('models.r')
source('helper_functions.r')
stat_param_cor <- function(init_par, covar, stats, n_sim, n_stats, model_func) {
pars <- rmvn(n_sim, init_par, covar)
stats_vecs <- matrix(NA, n_sim, n_stats)
cors <- matrix(NA, n_stats, length(init_par))
for (i in seq(n_sim)) {
stats_vecs[i, ] <- stats(model_func(pars[i, ]))
}
pars <- pars[!is.na(rowSums(stats_vecs)),]
stats_vecs <- stats_vecs[!is.na(rowSums(stats_vecs)),]
for (p in seq_along(init_par)) {
for (s in seq(n_stats)) {
cors[s, p] = abs(cor(pars[, p], stats_vecs[, s], use = "complete.obs"))
}
}
return(cors)
}
stat_cor <- function(init_par, covar, stats, n_sim, n_stats, model_func) {
pars <- rmvn(n_sim, init_par, covar)
stats_vecs <- matrix(NA, n_sim, n_stats)
for (i in seq(n_sim)) {
stats_vecs[i, ] <- stats(model_func(pars[i, ]))
}
stats_vecs <- stats_vecs[!is.na(rowSums(stats_vecs)),]
c <- abs(cor(stats_vecs, use = "complete.obs"))
return(c)
}
model_func <- function(pars) {
obs <- do.call(rjm_simple, as.list(append(pars, 1000)))
return(obs)
}
stats <- function(xs) {
sat <- extract_days(xs, c(5))
sun <- extract_days(xs, c(6))
mu <- mean(xs)
sigma <- sd(xs)
reg <- autoregress(xs, 1)
return(c(mu, mean(sat), mean(sun), reg, sigma))
}
true_par <- c(2.852, -0.089, -0.192, log(0.112 / (1 - 0.112)), log(0.114))
n_stats = 6
cor_sp <- stat_param_cor(true_par, diag(c(1, 1, 1, 1, 1))^2,
stats, 10000, n_stats, model_func)
cor_ss <- stat_cor(true_par, diag(c(1, 1, 1, 1, 1))^2, stats,
1000, n_stats, model_func)
draw_colnames_0 <- function (coln, gaps, ...) {
coord <- pheatmap:::find_coordinates(length(coln), gaps)
x     <- coord$coord - 0.5 * coord$size
res   <- grid::textGrob(
coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"),
vjust = 1.25, rot = 0, gp = grid::gpar(...)
)
return(res)
}
assignInNamespace(
x = "draw_colnames",
value = "draw_colnames_0",
ns = asNamespace("pheatmap")
)
cn <- c('$\\mu_0$', '$\\beta_1$', '$\\beta_2$', '$\\alpha_0$', '$\\sigma_0$')
rn <- c('$\\bar{x}(\\mathbf{y})$', '$\\bar{x}_5(\\mathbf{y})$', '$\\bar{x}_6(\\mathbf{y})$',
'$\\xi_0(\\mathbf{y})$', '$\\xi_1(\\mathbf{y})$', 'sd($\\mathbf{y}$)')
palette <- colorRampPalette(brewer.pal(7, name = 'Blues'))(100)
h_ss <- pheatmap(cor_ss, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs statistics',
fontsize=30, fontsize_row = 40, fontsize_col = 40,
color=palette, labels_row = TeX(rn), labels_col = TeX(rn))
h_sp <- pheatmap(cor_sp, cluster_cols = FALSE, cluster_rows = FALSE,
main='Abs Correlation: statistics vs parameters',
labels_col = TeX(cn), labels_row = TeX(rn),
fontsize=30, fontsize_row = 40, fontsize_col = 40,
color=palette)
pdf("../report/images/fitting/simple_model/cor_ss.pdf", width=15, height=12)
h_ss
dev.off()
pdf("../report/images/fitting/simple_model/cor_sp.pdf", width=15, height=12)
h_sp
dev.off()
set.seed(123)
### ------------------------------------------------------------------
sleep <- data.frame("duration" = c(11.03, 6.31, 5.66, 11.87, 7.64, 8.44, 10.51, 7.86, 5.48,
7.17, 7.46, 7.60, 8.88, 6.61, 7.77, 6.47, 6.69, 8.02, 6.89,
7.77, 8.12, 6.74, 6.91, 7.76, 6.08, 6.41, 7.93, 11.56, 8.03,
9.08, 7.49, 7.23, 7.75, 4.50, 8.22, 7.54, 7.69, 6.36, 7.31,
8.10, 7.36, 7.71, 7.39, 7.43, 7.91, 7.21, 7.00, 9.39, 7.31,
7.94, 9.24, 7.35, 8.08, 6.62, 7.67, 7.33, 9.12, 7.14, 8.73,
5.73, 8.30, 7.00, 9.48, 6.06, 8.47, 7.51, 7.16, 7.48, 6.99,
8.08, 6.88, 6.96, 9.46, 6.68, 6.85, 6.86, 8.21, 7.62, 6.60,
9.75, 7.24, 7.81, 7.31, 6.33, 7.13, 6.06, 7.90, 7.15, 7.06,
6.70, 5.76, 6.88, 5.92, 5.75, 6.42, 7.36, 6.07, 7.32, 7.55,
6.87, 8.30),
"onset" = c(-3.00, 2.13, 1.27, -2.74, 2.03, 1.51, 0.70, -0.30, -0.16,
0.21, -0.19, 0.15, 0.24, 1.56, 0.07, 2.23, 3.50, 0.65, -0.93,
1.33, 2.54, 3.33, 3.47, 2.19, 1.05, 0.21, 4.27, -1.19, -1.15,
1.10, 3.95, 1.18, -0.72, 1.39, 1.83, 0.46, 1.43, 2.02, 1.27,
1.42, 2.11, 2.53, 1.22, 0.69, 1.55, 2.77, 2.32, 0.16, -0.78,
0.74, 0.21, 1.89, 1.24, 0.81, 1.54, 2.91, -1.24, -0.51,
3.03, 2.81, -0.14, 1.71, -0.76, 1.34, 0.77, 0.55, 1.54,
0.60, -0.44, 3.43, -0.22, 2.69, -1.24, 1.17, 1.84, 1.33,
0.56, 0.37, 3.19, 1.01, -0.91, 1.14, 0.74, 0.00, 0.82, 0.85,
0.03, 1.82, 0.96, 2.38, 1.62, 2.67, 0.97, 3.18, 1.84, 2.12,
2.21, 0.36, 4.38, 1.44, 2.77))
## ------------------------------------------------------------------
library(rjags)
model_string = "
model {
# Likellihood:
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)
mu[i] <- beta_0 + (beta_1 * x[i])
}
# Priors:
beta_0 ~ dnorm(8, 1)
beta_1 ~ dnorm(0, 1)
tau ~ dexp(1/4)
}
"
jags_data <- list('x' = sleep$onset, 'y' = sleep$duration, 'n' = length(data))
model <- jags.model(textConnection(model_string),
data = jags_data)
update(model, n.iter=1000000)
samples = coda.samples(
model = model,
variable.names = c("beta_0", "beta_1", "tau"),
1000
)
## ------------------------------------------------------------------
plot_samples <- function(.samples) {
par(mfcol=c(3, 2), mar = c(5, 4, 4, 2) + 0.1)
traceplot(.samples)
samples_matrix <- as.matrix(.samples)
acf(samples_matrix[ ,1], main='ACF of beta_0')
acf(samples_matrix[ ,2], main='ACF of beta_1')
acf(samples_matrix[ ,3], main='ACF of tau')
}
plot_samples(samples)
## ------------------------------------------------------------------
model <- jags.model(textConnection(model_string),
data = jags_data)
update(model, n.iter=1000000)
samples = coda.samples(
model = model,
variable.names = c("beta_0", "beta_1", "tau"),
n.iter = 10000,
thin=5
)
## ------------------------------------------------------------------
plot_samples(samples)
## ------------------------------------------------------------------
par(mfrow = c(3, 1))
densplot(samples)
## ------------------------------------------------------------------
summary(samples)
HPDinterval(samples, prob = 0.95)
## ------------------------------------------------------------------
par(mfcol=c(1,1))
plot(sleep$onset, sleep$duration)
## ------------------------------------------------------------------
poly_model <- lm(duration ~ poly(onset, 2), sleep)
summary(poly_model)
## ------------------------------------------------------------------
pred <- predict(poly_model)
ix <- order(sleep$onset)
plot(sleep$onset, sleep$duration)
lines(sleep$onset[ix], pred[ix], col='red')
## ------------------------------------------------------------------
get_densities <- function(M, ys, x_star) {
df <- tail(do.call(rbind.data.frame, samples), M)
df['mu'] <- df$beta_0 + (df$beta_1 * x_star)
df['std'] <- sqrt(1/df$tau)
density <- function(y) {
return(dnorm(y, df[, 'mu'], df[, 'std']))
}
densities <- colSums(sapply(ys, density)) / M
return(densities)
}
ys <- seq(0, 24, 0.05)
ds <- get_densities(10, ys, -1)
plot(ys, ds, 'l', xlab='y*', ylab='density', main="Density plot for y* given x* = -1")
## ------------------------------------------------------------------
ds <- get_densities(100, ys, -1)
plot(ys, ds, 'l', xlab='y*', ylab='density', main="Density plot for y* given x* = -1")
